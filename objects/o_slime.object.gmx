<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_brickwall</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bg_x = 0;
bg_y = 0;
bg_w = 0;
bg_h = 0;

step = 0;
slime_blur = 0.01;
uTime = shader_get_uniform(shader_ripple,"Time");

rescan_boundaries = false;

surf = surface_create(CELLSIZE, CELLSIZE);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var i;
for (i = 0; i &lt; instance_number(o_slime); i += 1)
{
   var slime = instance_find(o_slime,i);
   slime.rescan_boundaries = true;
}
surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>slime_blur = slime_blur + step;
if( slime_blur &gt; 4 ) {  
    step = -0.05;
} else {
if( slime_blur &lt; 0.1 ) { 
    step = 0.05;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var bloodsystem = instance_find(o_bloodsack, 0);
part_emitter_region(bloodsystem.partBlood_sys, bloodsystem.partBlood_emit, x, y, x + 32, y - 32, 1, 1);
part_emitter_burst(bloodsystem.partBlood_sys, bloodsystem.partBlood_emit, bloodsystem.partBlood, 20);
instance_create(x, y, o_death);
instance_destroy(self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(rescan_boundaries) {
    surface_set_target(surf);
    draw_clear_alpha(0, 0);

    draw_background_part(test_tileset1, bg_x, bg_y, bg_w, bg_h, 0, 0);
 
    if (instance_position(x + 5, y - CELLSIZE * 0.5, o_slime) == noone) {
        // apply mask
        draw_set_blend_mode_ext( bm_dest_color, bm_zero );
          
        draw_sprite(sprite_slime_border_mask, MASK_TOP,  0, 0);
        draw_set_blend_mode_ext(bm_src_alpha, bm_inv_src_alpha );
    }

    if (instance_position(x - CELLSIZE * 0.5, y + 5 , o_slime) == noone) {
        // apply mask
        draw_set_blend_mode_ext( bm_dest_color, bm_zero );
          
        draw_sprite(sprite_slime_border_mask, MASK_LEFT,  0, 0);
        draw_set_blend_mode_ext(bm_src_alpha, bm_inv_src_alpha );
    }

    if (instance_position(x + CELLSIZE * 1.5, y + 5, o_slime) == noone) {
        // apply mask
        draw_set_blend_mode_ext( bm_dest_color, bm_zero );
          
        draw_sprite(sprite_slime_border_mask, MASK_RIGHT,  0, 0);
        draw_set_blend_mode_ext(bm_src_alpha, bm_inv_src_alpha );
    }
    
    if (instance_position(x + 5, y + CELLSIZE * 1.5 , o_slime) == noone) {
        // apply mask
        draw_set_blend_mode_ext( bm_dest_color, bm_zero );
          
        draw_sprite(sprite_slime_border_mask, MASK_BOTTOM,  0, 0);
        draw_set_blend_mode_ext(bm_src_alpha, bm_inv_src_alpha );
    }

   
    if (instance_position(x - CELLSIZE * 0.5, y + CELLSIZE * 1.5 , o_slime) == noone) {
        // apply mask
        draw_set_blend_mode_ext( bm_dest_color, bm_zero );
          
        draw_sprite(sprite_slime_border_mask, MASK_BOTTOM_LEFT,  0, 0);
        draw_set_blend_mode_ext(bm_src_alpha, bm_inv_src_alpha );
    }
    
    if (instance_position(x - CELLSIZE * 0.5, y - CELLSIZE * 0.5 , o_slime) == noone) {
        // apply mask
        draw_set_blend_mode_ext( bm_dest_color, bm_zero );
          
        draw_sprite(sprite_slime_border_mask, MASK_TOP_LEFT,  0, 0);
        draw_set_blend_mode_ext(bm_src_alpha, bm_inv_src_alpha );
    }

    if (instance_position(x + CELLSIZE * 1.5, y - CELLSIZE * 0.5 , o_slime) == noone) {
        // apply mask
        draw_set_blend_mode_ext( bm_dest_color, bm_zero );
          
        draw_sprite(sprite_slime_border_mask, MASK_TOP_RIGHT,  0, 0);
        draw_set_blend_mode_ext(bm_src_alpha, bm_inv_src_alpha );
    }

    if (instance_position(x + CELLSIZE * 1.5, y + CELLSIZE * 1.5 , o_slime) == noone) {
        // apply mask
        draw_set_blend_mode_ext( bm_dest_color, bm_zero );
          
        draw_sprite(sprite_slime_border_mask, MASK_BOTTOM_RIGHT,  0, 0);
        draw_set_blend_mode_ext(bm_src_alpha, bm_inv_src_alpha );
    }
                        
    surface_reset_target();
    rescan_boundaries = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_set(shader_ripple)
shader_set_uniform_f(uTime,current_time/1000)

draw_surface(surf, x, y);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
