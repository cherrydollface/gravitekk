<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Pause menu 
// Available selections
pauseMenu[0] = "Resume";
pauseMenu[1] = "Save"; 
pauseMenu[2] = "Load";
pauseMenu[3] = "Option";
pauseMenu[4] = "Quit";

// Misc values
spaceBetweenPositions = 64; 

// Menu cursor position
menuPosition = 0; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Listener for pause button
if(keyboard_check_pressed(vk_escape)){
    if(global.isPaused){
    scr_unpause_game();
       }
    else {
    scr_pause_game();
    }
}

var move = 0;

// Change postion
move -= max(keyboard_check_pressed(vk_up), keyboard_check_pressed(ord("W")), 0);
move += max(keyboard_check_pressed(vk_down), keyboard_check_pressed(ord("S")), 0);

// Reach maximum or minimum position value
if(move != 0){
    menuPosition += move;
    if(menuPosition &lt; 0) menuPosition = array_length_1d(pauseMenu) - 1;  
    if(menuPosition &gt; array_length_1d(pauseMenu) - 1) menuPosition = 0;  
}

// Active button

if(global.isPaused){
var push = max(keyboard_check_released(vk_enter), 
           keyboard_check_released(vk_shift), 
           keyboard_check_released(vk_space), 0);
           
// Call selected menu command
if (push == 1) scr_pause_menu();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw Menu

if (global.isPaused){
// Draw Background black
    draw_set_color(c_black);
    draw_rectangle(0, 0, room_width, room_height, false);
    
// Draw menu
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_set_font(font0);
    draw_set_colour(c_white)

// Draw menu elements
    for(var i = 0; i &lt; array_length_1d(pauseMenu); i++){
        draw_text(x + spaceBetweenPositions, y + (i * spaceBetweenPositions), string(pauseMenu[i]))
    }

// Draw selection
    draw_sprite(sprite_cursor, 0, x + 16, y + 16 + menuPosition * spaceBetweenPositions);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
