<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Main menu 
// Initializing global variables

//room_goto("startMenu");
global.gameState = STATE_MENU;


//scr_unpause_game();

//scr_global_variables();

//show_debug_message("Fame state");
//show_debug_message(global.gameState);

/*
// Available selections
menu[0] = "Start"; 
menu[1] = "Load";
menu[2] = "Option";
menu[3] = "About";
menu[4] = "Quit";

global.menuElements = menu;
global.playerInput = PLAYER_INPUT_ENABLED; // Problem with input mouse button click //Click activate 2 screens; current status only for disable inpt status

// Menu cursor position
menuPosition = 0; 
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Move selected area in menu
// Active button
/*
var push = max(keyboard_check_released(vk_enter), 
           keyboard_check_released(vk_shift), 
           keyboard_check_released(vk_space), 0);

*/

/*
if(keyboard_check_pressed(vk_escape)){
    if(global.gameState == STATE_PAUSE){
        scr_unpause_game();
       } else {
        scr_pause_game();
    }
}*/
/*


var xPostition = x + SPACE_BETWEEN_POSITIONS;
var xMaxRangePosition = xPostition + CELLSIZE * 6;
var i = 0;
var shift = 32;
if(point_in_rectangle(mouse_x, mouse_y, xPostition, y + (0 * SPACE_BETWEEN_POSITIONS)
    - shift, xMaxRangePosition, y + (1 * SPACE_BETWEEN_POSITIONS) - shift)){
    if(mouse_check_button_pressed (mb_left)){room_goto_next();}} // Start game
else if(point_in_rectangle(mouse_x, mouse_y, xPostition, y + (1 * SPACE_BETWEEN_POSITIONS)
    - shift, xMaxRangePosition, y + (2 * SPACE_BETWEEN_POSITIONS) - shift)){
    if(mouse_check_button_pressed (mb_left)){
        global.playerInput = PLAYER_INPUT_DISABLED;
        global.gameState = STATE_LOAD;
    }}        // Load
else if(point_in_rectangle(mouse_x, mouse_y, xPostition, y + (2 * SPACE_BETWEEN_POSITIONS)
    - shift, xMaxRangePosition, y + (3 * SPACE_BETWEEN_POSITIONS) - shift)){
    if(mouse_check_button_pressed (mb_left)){scr_load()}}        // About
else if(point_in_rectangle(mouse_x, mouse_y, xPostition, y + (3 * SPACE_BETWEEN_POSITIONS)
    - shift, xMaxRangePosition, y + (4 * SPACE_BETWEEN_POSITIONS) - shift)){
    if(mouse_check_button_pressed (mb_left)){}}                 // Option
else if(point_in_rectangle(mouse_x, mouse_y, xPostition, y + (4 * SPACE_BETWEEN_POSITIONS)
    - shift, xMaxRangePosition, y + (5 * SPACE_BETWEEN_POSITIONS) - shift)){
    if(mouse_check_button_pressed (mb_left)){game_end()}}       // Quit
    
    

/*

// Call menu
scr_cursor_logic(); // Active cursor logic
if (push == 1) scr_menu(); 
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw menu
/*
scr_draw_menu_board();

if ((global.gameState == STATE_SAVE) || (global.gameState == STATE_LOAD)){  
            //scr_cover_of_darkness();
            scr_draw_menu_board();
            scr_initialize_menus();
            global.menuElements = global.savedGames;
            global.playerInput = PLAYER_INPUT_ENABLED;
            } 
            */    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
